from django.db import models
from django_ckeditor_5.fields import CKEditor5Field
from django.utils.translation import gettext as _


class Category(models.Model):
    icon = models.FileField(verbose_name="–ó–Ω–∞—á–æ–∫", upload_to="icons")
    image = models.FileField(verbose_name="–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è", upload_to="images")
    name = models.CharField(verbose_name="–ù–∞–∑–≤–∞", max_length=16)

    def __str__(self) -> str:
        return self.name

    class Meta:
        verbose_name = "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è"
        verbose_name_plural = "–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó"


class ProductBrand(models.Model):
    logotype = models.FileField(verbose_name="–õ–æ–≥–æ", upload_to="logos")
    name = models.CharField(verbose_name="–ù–∞–∑–≤–∞", max_length=16)

    def __str__(self) -> str:
        return self.name

    class Meta:
        verbose_name = "–ë—Ä–µ–Ω–¥"
        verbose_name_plural = "–ë—Ä–µ–Ω–¥–∏"


class Product(models.Model):
    GENDER_CHOICES = [
        ("men", _("—á–æ–ª–æ–≤—ñ—á–µ")),
        ("women", _("–∂—ñ–Ω–æ—á–µ")),
        ("unisex", _("—É–Ω—ñ—Å–µ–∫—Å")),
    ]

    STICKER_CHOICES = [("top", "—Ç–æ–ø —Ç–æ–≤–∞—Ä"), ("new", "–Ω–æ–≤–∏–Ω–∫–∞"), ("promo", "–∞–∫—Üi—è")]

    name = models.CharField(verbose_name="–ù–∞–∑–≤–∞", max_length=64)
    short_desc = CKEditor5Field(
        verbose_name="–ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å", config_name="default", max_length=256
    )
    description = CKEditor5Field(
        verbose_name="–û–ø–∏—Å", config_name="default", max_length=2048
    )
    brand = models.ForeignKey(
        verbose_name="–ë—Ä–µ–Ω–¥",
        to=ProductBrand,
        on_delete=models.CASCADE,
        related_name="products",
    )
    gender_for = models.CharField(
        verbose_name="C—Ç–∞—Ç—å", max_length=6, choices=GENDER_CHOICES
    )
    special_sticker = models.CharField(
        verbose_name="–°—Çi–∫–µ—Ä", max_length=6, choices=STICKER_CHOICES, blank=True
    )
    related_accesories = models.ManyToManyField(
        verbose_name="–ê–∫—Å–µ—Å—É–∞—Ä–∏",
        to="self",
        related_name="accesories",
        symmetrical=False,
        blank=True,
    )
    related_category = models.ForeignKey(
        verbose_name="–ö–∞—Ç–µ–≥–æ—Äi—è",
        to=Category,
        on_delete=models.CASCADE,
        related_name="products",
    )
    included_in_promo = models.BooleanField(
        verbose_name="–í–∫–ª—é—á–µ–Ω–∏–π —É –∞–∫—Üi–π–Ω–∏–π –±–ª–æ–∫", default=False
    )
    included_in_top = models.BooleanField(
        verbose_name="–í–∫–ª—é—á–µ–Ω–∏–π —É —Ç–æ–ø –±–ª–æ–∫", default=False
    )
    included_in_recomends = models.BooleanField(
        verbose_name="–í–∫–ª—é—á–µ–Ω–∏–π —É —Ä–µ–∫–æ–º–µ–Ω–¥. –±–ª–æ–∫", default=False
    )

    def __str__(self) -> str:
        return self.name

    def get_avg_review(self):
        reviews = self.reviews.filter(active=True)
        if not reviews:
            return 0
        reviews = sum([item.rating for item in reviews]) / len(reviews)
        return round(reviews, 1)

    class Meta:
        verbose_name = "–¢–æ–≤–∞—Ä"
        verbose_name_plural = "–¢–æ–≤–∞—Ä–∏"

    def get_telegram_text(self):
        return self.name


class ProductImage(models.Model):
    image = models.FileField(verbose_name="–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è", upload_to="product_images")
    related = models.ForeignKey(
        verbose_name="–í—ñ–¥–Ω–æ—Å–∏—Ç—å—Å—è –¥–æ",
        to=Product,
        on_delete=models.CASCADE,
        related_name="images",
    )

    def __str__(self) -> str:
        return "–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É"

    class Meta:
        verbose_name = "–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É"
        verbose_name_plural = "–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Äi–≤"


class ProductVolume(models.Model):
    value = models.CharField(verbose_name="–û–ø—Üi—è", max_length=8)
    price = models.IntegerField(verbose_name="–¶i–Ω–∞")
    discount = models.IntegerField(verbose_name="–ó–Ω–∏–∂–∫–∞ %", default=0)
    related = models.ForeignKey(
        verbose_name="–í—ñ–¥–Ω–æ—Å–∏—Ç—å—Å—è –¥–æ",
        to=Product,
        on_delete=models.CASCADE,
        related_name="volumes",
    )

    def __str__(self) -> str:
        return f"–û–ø—Üi—è –æ–±'—î–º—É {self.value}"

    def get_curr_price(self):
        if self.discount:
            return self.price - (self.price / 100 * self.discount)
        return round(self.price, 1)

    class Meta:
        verbose_name = "–û–ø—Üi—è –æ–±'—î–º—É"
        verbose_name_plural = "–û–ø—Üi—ó –æ–±'—î–º—É"

    def get_telegram_text(self):
        return f"{self.value}/{self.get_curr_price()} ‚Ç¥"


class ProductOption(models.Model):
    name = models.CharField(verbose_name="–ù–∞–∑–≤–∞", max_length=32)
    related = models.ForeignKey(
        verbose_name="–í—ñ–¥–Ω–æ—Å–∏—Ç—å—Å—è –¥–æ",
        to=Product,
        on_delete=models.CASCADE,
        related_name="options",
    )

    def __str__(self) -> str:
        return "–í–∞—Ä—ñ–∞–Ω—Ç —Ä—ñ–∑–Ω–æ–≤–∏–¥—É"

    class Meta:
        verbose_name = "–û–ø—Üi—è —Ä—ñ–∑–Ω–æ–≤–∏–¥—É"
        verbose_name_plural = "–û–ø—Üi—ó —Ä—ñ–∑–Ω–æ–≤–∏–¥i–≤"


class ProductWrapper(models.Model):
    name = models.CharField(verbose_name="–ù–∞–∑–≤–∞", max_length=32)
    image = models.FileField(verbose_name="–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è", upload_to="wrapper_images")
    price = models.IntegerField(verbose_name="–¶—ñ–Ω–∞")
    related = models.ForeignKey(
        verbose_name="–í—ñ–¥–Ω–æ—Å–∏—Ç—å—Å—è –¥–æ",
        to=Product,
        on_delete=models.CASCADE,
        related_name="wrappers",
    )

    def __str__(self) -> str:
        return self.name

    def get_telegram_text(self):
        return f"{self.name}:{self.price}"

    def get_telegram_text_free(self):
        return f"{self.name}:0‚Ç¥"

    class Meta:
        verbose_name = "–û–±–≥–æ—Ä—Ç–∫–∞ –ø—Ä–æ–¥—É–∫—Ç—É"
        verbose_name_plural = "–û–±–≥–æ—Ä—Ç–∫–∏ –ø—Ä–æ–¥—É–∫—Çi–≤"


class ProductReview(models.Model):
    product = models.ForeignKey(
        Product, on_delete=models.CASCADE, related_name="reviews", verbose_name="–¢–æ–≤–∞—Ä"
    )
    name = models.CharField(max_length=100, verbose_name="–Ü–º'—è")
    text = models.TextField(verbose_name="–¢–µ–∫—Å—Ç –≤—ñ–¥–≥—É–∫—É")
    rating = models.DecimalField(
        max_digits=2, decimal_places=1, verbose_name="–û—Ü—ñ–Ω–∫–∞", default=0
    )
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è")
    active = models.BooleanField(verbose_name="–ê–∫—Ç–∏–≤–Ω–∏–π", default=False)

    def __str__(self):
        return f"–í—ñ–¥–≥—É–∫ –≤—ñ–¥ {self.name} –¥–ª—è {self.product.name}"

    class Meta:
        verbose_name = "–í—ñ–¥–≥—É–∫"
        verbose_name_plural = "–í—ñ–¥–≥—É–∫–∏"


class Promotion(models.Model):
    name = models.CharField(max_length=50, verbose_name="–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∞–∫—Ü—ñ—ó")
    applicable_categories = models.ManyToManyField(
        Category, verbose_name="–ó–∞—Å—Ç–æ—Å–æ–≤–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó", blank=True, related_name="promos"
    )

    def __str__(self):
        return self.name


class FreeProductPromotion(Promotion):
    promo_count = models.IntegerField(verbose_name="–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É")
    promo_category = models.ForeignKey(
        Category,
        verbose_name="–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è",
        blank=True,
        related_name="free_promo_category",
        on_delete=models.CASCADE,
    )

    class Meta:
        verbose_name = "–ê–∫—Üi—è"
        verbose_name_plural = "–ê–∫—Ü—ñ—ó (–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π —Ç–æ–≤–∞—Ä)"


class QuantityDiscountPromotion(Promotion):
    promo_quantity = models.IntegerField(
        verbose_name="–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É –æ–¥–Ω—ñ—î—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"
    )
    promo_discount = models.IntegerField(verbose_name="–íi–¥—Å–æ—Ç–æ–∫ –∑–Ω–∏–∂–∫–∏")

    class Meta:
        verbose_name = "–ê–∫—Üi—è"
        verbose_name_plural = "–ê–∫—Ü—ñ—ó (–ó–Ω–∏–∂–∫–∞ –Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å)"


class PriceDiscountPromotion(Promotion):
    promo_price = models.IntegerField(verbose_name="–°—É–º–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
    promo_discount = models.IntegerField(verbose_name="–íi–¥—Å–æ—Ç–æ–∫ –∑–Ω–∏–∂–∫–∏")

    class Meta:
        verbose_name = "–ê–∫—Üi—è"
        verbose_name_plural = "–ê–∫—Ü—ñ—ó (–ó–Ω–∏–∂–∫–∞ –Ω–∞ —Å—É–º—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è)"


class FreeDeliveryPromotion(Promotion):
    CONTROLLERS_CHOICES = [
        ("count", "–öi–ª—å–∫i—Å—Ç—å"),
        ("price", "–¶i–Ω–∞"),
    ]
    promo_controller = models.CharField(
        verbose_name="–û—Ä—ñ—î–Ω—Ç–∞—Ü—ñ—è –Ω–∞", max_length=12, choices=CONTROLLERS_CHOICES
    )
    promo_value = models.IntegerField(verbose_name="–ó–Ω–∞—á–µ–Ω–Ω—è")

    class Meta:
        verbose_name = "–ê–∫—Üi—è"
        verbose_name_plural = "–ê–∫—Ü—ñ—ó (–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞)"


class Promocode(models.Model):
    name = models.CharField(verbose_name="–ü—Ä–æ–º–æ–∫–æ–¥", max_length=50)
    discount = models.IntegerField(verbose_name="–ó–Ω–∏–∂–∫–∞")

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = "–ü—Ä–æ–º–æ–∫–æ–¥"
        verbose_name_plural = "–ü—Ä–æ–º–æ–∫–æ–¥–∏"


class Order(models.Model):
    datetime = models.DateTimeField(
        verbose_name="–î–∞—Ç–∞ —Ç–∞ —á–∞—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", auto_now_add=True
    )
    name = models.CharField(verbose_name="I–º'—è", max_length=20)
    surname = models.CharField(verbose_name="–ü—Ä—ñ–∑–≤–∏—â–µ", max_length=20)
    country_code = models.CharField(verbose_name="–ö–æ–¥ –∫—Ä–∞—ó–Ω–∏", max_length=3)
    number = models.CharField(verbose_name="–ù–æ–º–µ—Ä", max_length=12)
    payment_method = models.CharField(verbose_name="–¢–∏–ø –æ–ø–ª–∞—Ç–∏", max_length=50)
    post_office = models.CharField(verbose_name="–ü–æ—à—Ç–∞", max_length=20)
    post_office_id = models.CharField(verbose_name="–íi–¥–¥i–ª–µ–Ω–Ω—è", max_length=20)
    full_price = models.DecimalField(
        verbose_name="–¶i–Ω–∞", max_digits=12, decimal_places=2
    )
    comment = models.CharField(verbose_name="–ö–æ–º–µ–Ω—Ç–∞—Ä", max_length=256)
    promotion_text = models.CharField(
        verbose_name="üéÅüõí –ó–∞—Å—Ç–æ—Å–æ–≤–∞–Ω—ñ –∞–∫—Ü—ñ—ó —Ç–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∏:",
        max_length=1024,
        default="No promotion",
    )
    promocode = models.CharField(verbose_name="–ü—Ä–æ–º–æ–∫–æ–¥", max_length=16)

    class Meta:
        verbose_name = "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è"
        verbose_name_plural = "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è"

    def get_telegram_text(self):
        order_parts = self.order_items.all()
        parts_text = "\n".join([part.get_telegram_text() for part in order_parts])

        order_parts_present = self.order_items_present.all()
        parts_text_present = "\n".join(
            [part.get_telegram_text() for part in order_parts_present]
        )

        promocode_text = f"–ü—Ä–æ–º–æ–∫–æ–¥: {self.promocode}\n " if self.promocode else ""
        comment_text = f"–ö–æ–º–µ–Ω—Ç–∞—Ä: {self.comment}\n" if self.comment else ""
        present_text = (
            f"üéÅ –ü–æ–¥–∞—Ä—É–Ω–∫–∏:\n\n{parts_text_present}\n\n" if parts_text_present else ""
        )
        promotion_text = (
            f"üõç –ó–∞—Å—Ç–æ—Å–æ–≤–∞–Ω—ñ –∞–∫—Ü—ñ—ó —Ç–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∏:\n{self.promotion_text }\n\n"
            if self.promotion_text
            else ""
        )
        return (
            f"–î–∞—Ç–∞ —Ç–∞ —á–∞—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {self.datetime.strftime('%Y-%m-%d %H:%M:%S')}\n\n"
            f"üõí –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ {self.name} {self.surname}:\n"
            f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: +{self.country_code}{self.number.replace(' ','')}\n"
            f"–°–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏: {self.payment_method}\n"
            f"–ü–æ—à—Ç–∞: {self.post_office}/{self.post_office_id}\n"
            f"{promocode_text}{comment_text}\n"
            f"{promotion_text}{present_text}"
            "üì¶ –¢–æ–≤–∞—Ä–∏:\n\n"
            f"{parts_text}"
            f"–í—Å—å–æ–≥–æ: {self.full_price} ‚Ç¥\n"
        )


class OrderPart(models.Model):
    related_order = models.ForeignKey(
        verbose_name="–í—ñ–¥–Ω–æ—à–µ–Ω–Ω—è –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
        to=Order,
        on_delete=models.CASCADE,
        related_name="order_items",
    )
    product = models.ForeignKey(
        verbose_name="–¢–æ–≤–∞—Ä", to=Product, on_delete=models.SET_NULL, null=True
    )
    count = models.IntegerField(verbose_name="–öi–ª—å–∫i—Å—Ç—å")
    volume = models.ForeignKey(
        verbose_name="–û–±'–µ–º", to=ProductVolume, on_delete=models.SET_NULL, null=True
    )
    wrapper = models.ForeignKey(
        verbose_name="–û–±–µ—Ä—Ç–∫–∞", to=ProductWrapper, on_delete=models.SET_NULL, null=True
    )

    class Meta:
        verbose_name = "–ü–æ–¥—Ä–æ–±–∏—Üi –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"
        verbose_name_plural = "–ü–æ–¥—Ä–æ–±–∏—Üi –∑–∞–º–æ–≤–ª–µ–Ω—å"

    def get_telegram_text(self):
        """
        –§–æ—Ä–º—É—î –∫—Ä–∞—Å–∏–≤–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ–¥–Ω—ñ—î—ó —á–∞—Å—Ç–∏–Ω–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.
        """

        volume = f"–û–±'—î–º: {self.volume.get_telegram_text()};\n" if self.volume else ""
        wrapper = (
            f"–û–±–µ—Ä—Ç–∫–∞: {self.wrapper.get_telegram_text()};\n" if self.wrapper else ""
        )

        return f"{self.product.get_telegram_text()}/{self.count}—à—Ç.\n{volume}{wrapper}"


class OrderPartPresent(models.Model):
    related_order = models.ForeignKey(
        verbose_name="–í—ñ–¥–Ω–æ—à–µ–Ω–Ω—è –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
        to=Order,
        on_delete=models.CASCADE,
        related_name="order_items_present",
    )
    product = models.ForeignKey(
        verbose_name="–¢–æ–≤–∞—Ä", to=Product, on_delete=models.SET_NULL, null=True
    )
    count = models.IntegerField(verbose_name="–öi–ª—å–∫i—Å—Ç—å")
    volume = models.ForeignKey(
        verbose_name="–û–±'–µ–º", to=ProductVolume, on_delete=models.SET_NULL, null=True
    )
    wrapper = models.ForeignKey(
        verbose_name="–û–±–µ—Ä—Ç–∫–∞", to=ProductWrapper, on_delete=models.SET_NULL, null=True
    )

    class Meta:
        verbose_name = "–ü–æ–¥–∞—Ä—É–Ω–∫–∏üéÅ"
        verbose_name_plural = "–ü–æ–¥–∞—Ä—É–Ω–∫–∏üéÅ"

    def get_telegram_text(self):
        """
        –§–æ—Ä–º—É—î –∫—Ä–∞—Å–∏–≤–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ–¥–Ω—ñ—î—ó —á–∞—Å—Ç–∏–Ω–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.
        """

        volume = f"–û–±'—î–º: {self.volume.get_telegram_text()};\n" if self.volume else ""
        wrapper = (
            f"–û–±–µ—Ä—Ç–∫–∞: {self.wrapper.get_telegram_text_free()};\n"
            if self.wrapper
            else ""
        )

        return f"{self.product.get_telegram_text()}/{self.count}—à—Ç.\n{volume}{wrapper}"


class Payment(models.Model):
    """
    –ú–æ–¥–µ–ª—å –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –ø–ª–∞—Ç–µ–∂—ñ–≤.
    """

    order = models.ForeignKey(
        verbose_name="–ö–ª—ñ–µ–Ω—Ç", to=Order, on_delete=models.SET_NULL, null=True
    )
    summary_price = models.DecimalField(
        verbose_name="–°—É–º–∞", max_digits=10, decimal_places=2
    )
    date = models.DateTimeField(verbose_name="–î–∞—Ç–∞", auto_now_add=True, blank=True)

    def __str__(self) -> str:
        return f"–ü–ª–∞—Ç—ñ–∂ {self.id}, —Å—É–º–∞ {self.summary_price}, –¥–∞—Ç–∞ {self.date}"

    class Meta:
        verbose_name = "–ü–ª–∞—Ç—ñ–∂"
        verbose_name_plural = "–ü–ª–∞—Ç–µ–∂—ñ"

    def get_telegram_text(self):
        return (
            f"‚úÖ–£—Å–ø—ñ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–æ {self.date.strftime('%Y-%m-%d %H:%M:%S')}, —Å—É–º–∞ {self.summary_price}‚Ç¥\n"
            f"–î–∞—Ç–∞ —Ç–∞ —á–∞—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {self.datetime.strftime('%Y-%m-%d %H:%M:%S')}\n\n"
            f"üõí –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ {self.name} {self.surname}:\n"
        )
